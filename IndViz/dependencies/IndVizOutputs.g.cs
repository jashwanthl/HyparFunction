// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Collections.Generic;

namespace IndViz
{
    public class IndVizOutputs: SystemResults
    {
		/// <summary>
		/// The volume.
		/// </summary>
		[JsonProperty("Volume")]
		public double Volume { get; set; }

		/// <summary>
		/// Estimated
		/// </summary>
		[JsonProperty("Area Required")]
		public double AreaRequired { get; set; }

		/// <summary>
		/// Estimated
		/// </summary>
		[JsonProperty("Area Req in Acres")]
		public double AreaReqInAcres { get; set; }

		/// <summary>
		/// Estimated in USD
		/// </summary>
		[JsonProperty("Construction Cost")]
		public string ConstructionCost { get; set; }

		/// <summary>
		/// Estimated in MegaWatts
		/// </summary>
		[JsonProperty("Utility Power Capacity Req")]
		public double UtilityPowerCapacityReq { get; set; }

		/// <summary>
		/// SCFM
		/// </summary>
		[JsonProperty("Nitrogen Use")]
		public double NitrogenUse { get; set; }

		/// <summary>
		/// SCFM
		/// </summary>
		[JsonProperty("Compressed air")]
		public double CompressedAir { get; set; }

		/// <summary>
		/// Gas Capacity
		/// </summary>
		[JsonProperty("MBH Nat. Gas Capacity")]
		public double MBHNatGasCapacity { get; set; }

		/// <summary>
		/// Tonnes
		/// </summary>
		[JsonProperty("Chilled water")]
		public double ChilledWater { get; set; }

		/// <summary>
		/// Percentages
		/// </summary>
		[JsonProperty("One Percent RH")]
		public double OnePercentRH { get; set; }

		/// <summary>
		/// Percentages
		/// </summary>
		[JsonProperty("Ten Percent RH")]
		public double TenPercentRH { get; set; }

		/// <summary>
		/// Percentages
		/// </summary>
		[JsonProperty("Thirty Five Percent RH")]
		public double ThirtyFivePercentRH { get; set; }

        /// <summary>
        /// Construct a IndVizOutputs with default inputs.
        /// This should be used for testing only.
        /// </summary>
        public IndVizOutputs() : base()
        {
        }

        /// <summary>
        /// Construct a IndVizOutputs specifying all inputs.
        /// </summary>
        /// <returns></returns>
        [JsonConstructor]
        public IndVizOutputs(double volume, double areaRequired, double areaReqInAcres, string constructionCost, double utilityPowerCapacityReq, double nitrogenUse, double compressedAir, double mBHNatGasCapacity, double chilledWater, double onePercentRH, double tenPercentRH, double thirtyFivePercentRH) : base()
        {
			this.Volume = volume;
			this.AreaRequired = areaRequired;
			this.AreaReqInAcres = areaReqInAcres;
			this.ConstructionCost = constructionCost;
			this.UtilityPowerCapacityReq = utilityPowerCapacityReq;
			this.NitrogenUse = nitrogenUse;
			this.CompressedAir = compressedAir;
			this.MBHNatGasCapacity = mBHNatGasCapacity;
			this.ChilledWater = chilledWater;
			this.OnePercentRH = onePercentRH;
			this.TenPercentRH = tenPercentRH;
			this.ThirtyFivePercentRH = thirtyFivePercentRH;

		}

		public override string ToString()
		{
			var json = JsonConvert.SerializeObject(this);
			return json;
		}
	}
}